
module ROM( input            rd,
            input     [0:15] addr,
           output reg [0:15] data );

//   always_ff @(posedge rd)
   always_comb
      if (rd)
         case (addr)
//                00: data <= {4'b000, 4'd1, 8'd240};
//                01: data <= {4'b001, 4'd1, 8'd248};
//                02: data <= {4'b000, 4'd2, 8'd241};
//                03: data <= {4'b001, 4'd2, 8'd249};
//                04: data <= {4'b000, 4'd3, 8'd242};
//                05: data <= {4'b001, 4'd3, 8'd250};
//                06: data <= {4'b000, 4'd4, 8'd243};
//                07: data <= {4'b001, 4'd4, 8'd251};
//                08: data <= {4'b000, 4'd5, 8'd244};
//                09: data <= {4'b001, 4'd5, 8'd252};
//                10: data <= {4'b000, 4'd6, 8'd245};
//                11: data <= {4'b001, 4'd6, 8'd253};
//                12: data <= {4'b000, 4'd7, 8'd246};
//                13: data <= {4'b001, 4'd7, 8'd254};
//                14: data <= {4'b000, 4'd8, 8'd247};
//                15: data <= {4'b001, 4'd8, 8'd255};
                
//                16: data <= {4'b011, 4'b0100, 8'b00001111};
//                17: data <= {4'b011, 4'b1000, 8'b01111000};
//                18: data <= {4'b010, 4'b0001, 4'b1000, 4'b0100};
//                19: data <= {4'b100, 4'b0000, 4'b1000, 4'b0001};
                
//                20: data <= {4'b000, 4'b0100, 8'b00001111};
//                21: data <= {4'b000, 4'b1000, 8'b01111000};
//                22: data <= {4'b001, 4'b0100, 8'b00001111};
//                23: data <= {4'b001, 4'b1000, 8'b01111000};
                
//                24: data <= {4'b000, 4'd8, 8'd247};
//                25: data <= {4'b101, 4'd8, 8'd24};
   
   /*This program takes de inputs in the switchs and adds it with a
     arbtrary number, after that it shows the result in the LEDs.*/
     
                00: data <= {4'b000, 4'd1, 8'd240};     // R[1] = a[240]
                01: data <= {4'b000, 4'd2, 8'd241};     // R[2] = a[241]...
                02: data <= {4'b000, 4'd3, 8'd242};
                03: data <= {4'b000, 4'd4, 8'd243};
                04: data <= {4'b000, 4'd5, 8'd244};
                05: data <= {4'b000, 4'd6, 8'd245};
                06: data <= {4'b000, 4'd7, 8'd246};
                07: data <= {4'b000, 4'd8, 8'd247};

                08: data <= {4'b011, 4'd0, 4'b0,4'd1};  // R[0] = 0b0001
                09: data <= {4'b110, 4'd2, 4'd2, 4'd0}; // R[2] = R[2] << R[0]
                10: data <= {4'b011, 4'd0, 4'b0,4'd2};  // R[0] = 0b0010
                11: data <= {4'b110, 4'd3, 4'd3, 4'd0}; // R[3] = R[3] << R[0]...
                12: data <= {4'b011, 4'd0, 4'b0,4'd3};
                13: data <= {4'b110, 4'd4, 4'd4, 4'd0};  
                14: data <= {4'b011, 4'd0, 4'b0,4'd4};
                15: data <= {4'b110, 4'd5, 4'd5, 4'd0};  
                16: data <= {4'b011, 4'd0, 4'b0,4'd5};
                17: data <= {4'b110, 4'd6, 4'd6, 4'd0};  
                18: data <= {4'b011, 4'd0, 4'b0,4'd6};
                19: data <= {4'b110, 4'd7, 4'd7, 4'd0};  
                20: data <= {4'b011, 4'd0, 4'b0,4'd7};
                21: data <= {4'b110, 4'd8, 4'd8, 4'd0};  
                
                22: data <= {4'b011, 4'd9, 8'd3};       // R[9] = 3 (arbitrary number) 
                23: data <= {4'b010, 4'd9, 4'd9, 4'd1}; // R[9] = R[9] + R[1]
                24: data <= {4'b010, 4'd9, 4'd9, 4'd2}; // R[9] = R[9] + R[2]...
                25: data <= {4'b010, 4'd9, 4'd9, 4'd3};
                26: data <= {4'b010, 4'd9, 4'd9, 4'd4};
                27: data <= {4'b010, 4'd9, 4'd9, 4'd5};
                28: data <= {4'b010, 4'd9, 4'd9, 4'd6};
                29: data <= {4'b010, 4'd9, 4'd9, 4'd7};
                30: data <= {4'b010, 4'd9, 4'd9, 4'd8};

                31: data <= {4'b011, 4'd0, 4'b1,4'd0};  // R[0] = 0b1000
                32: data <= {4'b110, 4'd1, 4'd9, 4'd0}; // R[1] = R[9] >> R[0]
                33: data <= {4'b011, 4'd0, 4'b1,4'd1};  // R[0] = 0b1001
                34: data <= {4'b110, 4'd2, 4'd9, 4'd0}; // R[2] = R[9] >> R[0]...
                35: data <= {4'b011, 4'd0, 4'b1,4'd2};
                36: data <= {4'b110, 4'd3, 4'd9, 4'd0};
                37: data <= {4'b011, 4'd0, 4'b1,4'd3};
                38: data <= {4'b110, 4'd4, 4'd9, 4'd0};
                39: data <= {4'b011, 4'd0, 4'b1,4'd4};
                40: data <= {4'b110, 4'd5, 4'd9, 4'd0};
                41: data <= {4'b011, 4'd0, 4'b1,4'd5};
                42: data <= {4'b110, 4'd6, 4'd9, 4'd0};
                43: data <= {4'b011, 4'd0, 4'b1,4'd6};
                44: data <= {4'b110, 4'd7, 4'd9, 4'd0};
                45: data <= {4'b011, 4'd0, 4'b1,4'd7};
                46: data <= {4'b110, 4'd8, 4'd9, 4'd0};

                47: data <= {4'b110, 4'd0, 4'b1,4'd0};
                48: data <= {4'b110, 4'd0, 4'b1,4'd1};
                49: data <= {4'b110, 4'd0, 4'b1,4'd2};
                50: data <= {4'b110, 4'd0, 4'b1,4'd3};
                51: data <= {4'b110, 4'd0, 4'b1,4'd4};
                52: data <= {4'b110, 4'd0, 4'b1,4'd5};
                53: data <= {4'b110, 4'd0, 4'b1,4'd6};
                54: data <= {4'b110, 4'd0, 4'b1,4'd7};
                
                55: data <= {4'b001, 4'd1, 8'd248};           // a[248] = R[1]
                56: data <= {4'b001, 4'd2, 8'd249};           // a[249] = R[2]...
                57: data <= {4'b001, 4'd3, 8'd250};
                58: data <= {4'b001, 4'd4, 8'd251};
                59: data <= {4'b001, 4'd5, 8'd252};
                60: data <= {4'b001, 4'd6, 8'd253};
                61: data <= {4'b001, 4'd7, 8'd254};
                62: data <= {4'b001, 4'd8, 8'd255};

           default: data <= {4'b1111, 4'b1111, 8'b11111111};
         endcase
     else data <= 'bz;
endmodule
