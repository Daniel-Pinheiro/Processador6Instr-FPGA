
module ROM( input            rd,
            input     [0:15] addr,
           output reg [0:15] data );

   always_comb
      if (rd)
         case (addr)
                00: data <= {4'b000, 4'd1, 8'd240};
                01: data <= {4'b000, 4'd2, 8'd241};
                02: data <= {4'b000, 4'd3, 8'd242};
                03: data <= {4'b000, 4'd4, 8'd243};
                04: data <= {4'b000, 4'd5, 8'd244};
                05: data <= {4'b000, 4'd6, 8'd245};
                06: data <= {4'b000, 4'd7, 8'd246};
                07: data <= {4'b000, 4'd8, 8'd247};
                
                08: data <= {4'b001, 4'd1, 8'd248};
                09: data <= {4'b001, 4'd2, 8'd249};
                10: data <= {4'b001, 4'd3, 8'd250};
                11: data <= {4'b001, 4'd4, 8'd251};
                12: data <= {4'b001, 4'd5, 8'd252};
                13: data <= {4'b001, 4'd6, 8'd253};
                14: data <= {4'b001, 4'd7, 8'd254};
                15: data <= {4'b001, 4'd8, 8'd255};

                16: data <= {4'b011, 4'b0100, 8'b00001111};
                17: data <= {4'b011, 4'b1000, 8'b01111000};
                18: data <= {4'b010, 4'b0001, 4'b1000, 4'b0100};
                19: data <= {4'b100, 4'b0000, 4'b1000, 4'b0001};
                
                20: data <= {4'b000, 4'b0100, 8'b00001111};
                21: data <= {4'b000, 4'b1000, 8'b01111000};
                22: data <= {4'b001, 4'b0100, 8'b00001111};
                23: data <= {4'b001, 4'b1000, 8'b01111000};
                
                24: data <= {4'b000, 4'd8, 8'd247};
                25: data <= {4'b101, 4'd8, 8'd24};
           default: data <= {4'b111, 4'b1111, 8'b11111111};
         endcase
     else data <= 'bz;
endmodule
